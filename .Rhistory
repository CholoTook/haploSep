hap_pressure_list <- list()
errS_list <- list()
errF_list <- list()
stabS_list <- list()
stabF_list <- list()
save_path <- "relaxF_biasT_weightsF/"
maxID16 <- rep(0, length(recombination_vec))
r=1
#### Read selection coefficient info ####
s_file <- read.table(paste0("selcoeff", recombination_vec[r], ".txt"), header = FALSE)
col3 <- as.character(s_file[,3])
allele_benef <- c()
for (i in 1:length(col3)){
tmp_benef <- paste0(strsplit(col3[i], "/")[[1]][1], strsplit(col3[i], "/")[[1]][1])
if(strsplit(tmp_benef, "")[[1]][1]==strsplit(tmp_benef, "")[[1]][2]){
allele_benef <- c(allele_benef, strsplit(tmp_benef, "")[[1]][1])
} else {
message("Error the two alleles are different!")
return()
}
}
#### Read allele frequencies ####
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
Ymat <- as.matrix(y[,6:ncol(y)])
#### Add poolSeq noise ####
covMat <-  matrix(rpois(length(Ymat), 80), nrow = nrow(Ymat), ncol = ncol(Ymat))
Ymat_noisy <- rbinom(n = length(Ymat), size = covMat, prob = Ymat)/covMat
saveRDS(Ymat_noisy, paste0(save_path, "NoisyAF_Recombination", recombination_vec[r],".rds"))
#### Show sweeps ####
##### Analysis #######
rm(list = ls())
path = "/Users/mpelizzo/Documents/Haplotypes/mimicree/MimicreeForRecombinationSweeps/"
setwd(path)
#### After running MimicreeForRecombination5.R need to take those results, reconstruct haplotype and analyse the error ####
folders <- c("Result/","Result_1/","Result_2/","Result_3/","Result_4/","Result_5/","Result_6/","Result_7/","Result_8/","Result_9/","Result_10/")
recombination_vec <-  c(0, 1e-05, 1e-03, 0.1, 0.5, 1.2, 5)
files <- c("haplo500", "Recombination", "selcoeff")
nsim <- 9
ratios <- c()
nhap_mat <- c() #each row is a time point, each column is a rec value and it counts how many different haps are present in the pop, for each time and r
hap_pressure_list <- list()
errS_list <- list()
errF_list <- list()
stabS_list <- list()
stabF_list <- list()
save_path <- "relaxF_biasT_weightsF/"
maxID16 <- rep(0, length(recombination_vec))
r=1
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y), type = "l", ylim = c(0,1))
head(y)
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
r = 2
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
r = 3
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
r = 4
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
r = 5
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,5:ncol(y)]), type = "l", ylim = c(0,1))
warnings()
y[,5]
r=6
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r = 7
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
rm(list=ls())
path = "/Users/mpelizzo/Documents/Haplotypes/mimicree/MimicreeForRecombination9/"
setwd(path)
#### After running MimicreeForRecombination5.R need to take those results, reconstruct haplotype and analyse the error ####
folders <- c("Result/","Result_1/","Result_2/","Result_3/","Result_4/","Result_5/","Result_6/","Result_7/","Result_8/","Result_9/","Result_10/")
recombination_vec <-  c(1e-04, 1e-03, 0.005, 0.01, 0.03, 0.05, 0.1, 0.3, 0.5, 1, 5)
files <- c("haplo500", "Recombination", "selcoeff")
nsim <- 9
ratios <- c()
nhap_mat <- c() #each row is a time point, each column is a rec value and it counts how many different haps are present in the pop, for each time and r
hap_pressure_list <- list()
errS_list <- list()
errF_list <- list()
stabS_list <- list()
stabF_list <- list()
save_path <- "relaxF_biasF_weights/"
maxID16 <- rep(0, length(recombination_vec))
r=1
#### Read allele frequencies ####
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r=2
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r=3
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r=4
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r=6
r=5
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
r
r=6
y <- read.csv(paste0(folders[r], "OutputPythonAlleli.csv"), header = TRUE, sep = ",")
#### Compare true and reconstructed results for haplotype frequency & structure ####
#### I need to convert the matrix of haploid haplotypes I generate to 0,1s: ####
#### Read in true haplotypes: 0-1 matrix ####
#evolved.haplotypes: matrix with A,C,T,G and haploids haplotypes. Used, for example, for the selection pressure on the haplotypes
#true_str: matrix with 0 and 1 --> corresponds to evolved.haplotypes with 0,1 instead of A,C,T,G
#hap.freq: matrix with the haplotype frequencies, order of the haplotypes corresponds to the column in evolved.haplotypes
evolved.haplotypes <- read.table(paste0(folders[r], "OutputPythonHaplotypeStructureMatrix.txt"), header = FALSE, quote = " ")
rising_allele <- y[,3] #because in OutputPythonAlleli.csv the frequency is the frequency of the rising allele
evolved.haplotypes <- as.matrix(evolved.haplotypes)
true_str <- evolved.haplotypes==rising_allele
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
matplot(t(y[,6:ncol(y)]), type = "l", ylim = c(0,1))
dim(hap.freq)
res <- readRDS(paste0(save_path, "ReconstructedHaplotypes_Recombination", recombination_vec[r], ".rds"))
matplot(t(res$omega), ylim = c(0,1), type = "l")
0.25*7
0.2*7
0.2*4
0.2*3
r=3
res <- readRDS(paste0(save_path, "ReconstructedHaplotypes_Recombination", recombination_vec[r], ".rds"))
matplot(t(res$omega), ylim = c(0,1), type = "l")
hap.freq <- read.csv(paste0(folders[r], "OutputPythonHaplotypeMatrix.csv"), header = T, sep = ",")
hap.freq <- hap.freq[,-1]
matplot(t(hap.freq), type = "l", ylim = c(0,1))
ceil(3.2)
floor(3.2)
y
freq
freq<-res$omega
?pc
?pca
is.integer(c(1,2,3))
lapply(c(1,2,3), is.integer)
apply(c(1,2,3), is.integer)
apply(c(1,2,3), 1, is.integer)
sapply(c(1,2,3), is.integer)
sapply(c(1,2,3), is.integer())
is.integer(1)
str(1)
y=1:10
all(y==floor(y))
floor(y)
?floor
logical(2)
m <- matrix(c(rep(0,20), rep(1, 10)), ncol = 2, nrow = 10)
is.logical(m)
hp_str=m
(sum(hp_str == 0) + sum(hp_str==1))!=length(hp_str)
sum(hp_str == 0) + sum(hp_str==1)
length(hp_str)
hp_str
m
hp_str <- matrix(c(rep(0,20), rep(1, 10)), ncol = 3, nrow = 10)
length(hp_str)
sum(hp_str == 0) + sum(hp_str==1)
hp_str <- matrix(sample(c(rep(0,20, rep(1,30))), 50), nrow = 10, ncol = 5)
Ne <- 300
tp <- seq(0,60,10)
hp_str <- matrix(sample(c(rep(0,20), rep(1,30)), 50), nrow = 10, ncol = 5)
Ne <- 300
tp <- seq(0,60,10)
Data <- haploSimulate(hp_str, Ne, tp)#, meancov=NULL, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
haploSimulate <- function(hp_str, Ne, tp, meancov=NULL, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE){
if (missing(hp_str)){
stop("The haplotype structure 'hp_str' is required to simulate haplotype frequencies")
}
if (missing(Ne)){
stop("A value of the effective population size 'Ne' is required to simulate drift")
}
if (missing(tp)){
stop("Time points of interest are required to simulate the haplotype frequencies")
}
if ((sum(hp_str == 0) + sum(hp_str==1))!=length(hp_str)){
stop("All entries in the haplotype structure matrix 'hp_str' needs to be 0/1")
}
if (!(Ne==floor(Ne))){
Ne <- as.integer(Ne)
warning("Ne is transformed to the closest integer value")
}
if (!all(tp==floor(tp))){
stop("Time points of interest need to be integer values")
}
if (is.null(hp0)){
# Haplotype frequency constant at time point 0
hp0 <- rep(1/c,c)
}
# Evolve the haplotypes
max.len <- length(hp0)
#forward in time simulations: initialize trajectory matrix
hp_freq <- matrix(NA, ncol=length(tp), nrow=max.len, dimnames=list(c(), paste0("F", tp)))
if(0 %in% tp){
hp_freq[,"F0"] <- hp0
}
if(!haploid)
Ne <- 2*Ne
g <- 1
p <- hp0
wA <- 1+s
wa <- 1
fitness_hp <- rep(1,max.len)
hp_sel <- which(hp_str[benef_all,]==1)
# simulate allele frequencies over time
while(g <= max(tp)) {
if (sum(s!=0)>0){
#apply selection
for (i in 1:ncol(hp_str)){
if(sum(hp_str[benef_all,i])>0){
fitness_hp[i] <- fitness_hp[i]*sum(wA[benef_all][as.logical(hp_str[benef_all,i])])
}
}
p <- p*fitness_hp
}
# apply drift
if(!is.na(Ne))
p <- rmultinom(1, Ne, p) / Ne
if(g %in% tp){
hp_freq[,paste0("F", g)] <- p
}
g <- g+1
}
#True alelle frequency from the haplotypes
afMat <- hp_str %*% hp_freq
afMat <- pmin(pmax(afMat,0),1)
if (!is.null(meancov)){
covMat <- matrix(rpois(length(afMat), lambda=meancov), ncol=ncol(afMat))
afMat_err <- rbinom(n = length(afMat), size = covMat, prob = afMat)/covMat #NOISY allele frequency
return(list(afMat_err, hp_freq, hp_str, covMat))
} else {
return(list(afMat, hp_freq, hp_str))
}
}
Data <- haploSimulate(hp_str, Ne, tp)#, meancov=NULL, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
haploSimulate <- function(hp_str, Ne, tp, meancov=NULL, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE){
if (missing(hp_str)){
stop("The haplotype structure 'hp_str' is required to simulate haplotype frequencies")
}
if (missing(Ne)){
stop("A value of the effective population size 'Ne' is required to simulate drift")
}
if (missing(tp)){
stop("Time points of interest are required to simulate the haplotype frequencies")
}
if ((sum(hp_str == 0) + sum(hp_str==1))!=length(hp_str)){
stop("All entries in the haplotype structure matrix 'hp_str' needs to be 0/1")
}
if (!(Ne==floor(Ne))){
Ne <- as.integer(Ne)
warning("Ne is transformed to the closest integer value")
}
if (!all(tp==floor(tp))){
stop("Time points of interest need to be integer values")
}
if (is.null(hp0)){
# Haplotype frequency constant at time point 0
hp0 <- rep(1/ncol(hp_str),ncol(hp_str))
}
# Evolve the haplotypes
max.len <- length(hp0)
#forward in time simulations: initialize trajectory matrix
hp_freq <- matrix(NA, ncol=length(tp), nrow=max.len, dimnames=list(c(), paste0("F", tp)))
if(0 %in% tp){
hp_freq[,"F0"] <- hp0
}
if(!haploid)
Ne <- 2*Ne
g <- 1
p <- hp0
wA <- 1+s
wa <- 1
fitness_hp <- rep(1,max.len)
hp_sel <- which(hp_str[benef_all,]==1)
# simulate allele frequencies over time
while(g <= max(tp)) {
if (sum(s!=0)>0){
#apply selection
for (i in 1:ncol(hp_str)){
if(sum(hp_str[benef_all,i])>0){
fitness_hp[i] <- fitness_hp[i]*sum(wA[benef_all][as.logical(hp_str[benef_all,i])])
}
}
p <- p*fitness_hp
}
# apply drift
if(!is.na(Ne))
p <- rmultinom(1, Ne, p) / Ne
if(g %in% tp){
hp_freq[,paste0("F", g)] <- p
}
g <- g+1
}
#True alelle frequency from the haplotypes
afMat <- hp_str %*% hp_freq
afMat <- pmin(pmax(afMat,0),1)
if (!is.null(meancov)){
covMat <- matrix(rpois(length(afMat), lambda=meancov), ncol=ncol(afMat))
afMat_err <- rbinom(n = length(afMat), size = covMat, prob = afMat)/covMat #NOISY allele frequency
return(list(afMat_err, hp_freq, hp_str, covMat))
} else {
return(list(afMat, hp_freq, hp_str))
}
}
Data <- haploSimulate(hp_str, Ne, tp)#, meancov=NULL, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
Data
identical(Data[[3]], hp_str)
colSums(Data[[2]])
meancov= 80
Data <- haploSimulate(hp_str, Ne, tp, meancov=NULL)#, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
hp0 = c(0.1,0.3,0.2, 0.05, 0.35)
Data <- haploSimulate(hp_str, Ne, tp, meancov=NULL, hp0 = NULL)#, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
Data[[2]]
meancov= 80
Data <- haploSimulate(hp_str, Ne, tp, meancov=meancov)#, hp0 = NULL, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
hp0 = c(0.1,0.3,0.2, 0.05, 0.35)
Data <- haploSimulate(hp_str, Ne, tp, meancov=meancov, hp0 = hp0)#, benef_all=NULL, s=0, h=0.5, haploid=FALSE)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
Data[[2]]
benef_all = c(1,3)
s = c(0.05,0,0.2,rep(0,7))
Data <- haploSimulate(hp_str, Ne, tp, meancov=meancov, hp0 = hp0, benef_all=benef_all, s=s)#, haploid=FALSE)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
Data[[2]]
haploid=TRUE
Data <- haploSimulate(hp_str, Ne, tp, meancov=meancov, hp0 = hp0, benef_all=benef_all, s=s, haploid=haploid)
identical(Data[[3]], hp_str)
colSums(Data[[2]])
?roxygenize
library(roxygen2)
roxygen2::roxygenise()
setwd("/Users/mpelizzo/Documents/Haplotypes/Paper/V6/Rpackage/haploSep/data/")
setwd("/Users/mpelizzo/Documents/Haplotypes/Paper/V6/Rpackage/haploSep/")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise(haploSimulate())
roxygen2::roxygenise(haploSimulate.R)
?devtools::document
roxygen2::roxygenize
?roxygen2::roxygenize
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
